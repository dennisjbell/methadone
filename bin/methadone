#!/usr/bin/env ruby

require 'fileutils'
require 'optparse'
require 'methadone'
require 'methadone/cli'

include FileUtils
include Methadone::Main
include Methadone::CLILogging
include Methadone::CLI
include Methadone::SH

main do |app_name|
  check_and_prepare_basedir!(app_name,options[:force])
  using_readme = options[:readme]

  gemname = File.basename(app_name)
  module_name = gemname.split(/-/).map(&:capitalize).collect{ |segment| segment.split(/_/).map(&:capitalize).join('') }.join('::')

  debug "Creating project for gem #{gemname}"

  chdir File.dirname(app_name)

  # Create the basic files for a gem via bundler:
  #   Gemfile
  #   Rakefile
  #   LICENSE.txt
  #   README.md
  #   .gitignore
  #   <gemname>.gemspec
  #   lib/<gemname>.rb
  #   lib/<gemname>/version.rb
  require_file = nil
  sh! "bundle gem #{gemname} --no-color" do |stdout|
    require_file = stdout.split(/\n/).select { |file|
      file =~ /\.rb$/ && file !~ /version.rb$/
    }.first
  end
  require_file = gemname if require_file.nil?
  require_file.gsub!(/^.*lib\//,'')

  add_library_to_load_path = options[:add_lib] || false

  chdir gemname

  template_dirs_in(:full).each  { |dir| mkdir_p dir }

  commands = options[:commands]
  multi = !commands.nil?
  if multi
    mkdir_p "lib/#{gemname}/commands"
    copy_file 'lib/commands.rb', :as => "#{gemname}/commands.rb", :from => :multicommand, :binding => binding
    commands.each do |cmd|
      copy_file 'lib/command.rb', :as => "#{gemname}/commands/#{normalize_command(cmd)}.rb",  :from => :multicommand, :binding => binding
    end
  end

  rspec = options[:rspec]

  ["Rakefile", ".gitignore", "features/support/env.rb"].each do |file|
    copy_file file, :binding => binding
  end

  if rspec
    template_dirs_in(:rspec).each  { |dir| mkdir_p dir }
    copy_file "spec/something_spec.rb", :from => :rspec, :binding => binding
  else
    template_dirs_in(:test_unit).each  { |dir| mkdir_p dir }
    copy_file "test/tc_something.rb", :from => :test_unit, :binding => binding
  end

  license = options[:license]
  warn "warning: your app has no license" unless license
  license = nil if license == 'NONE'
  copy_file "#{options[:license]}_LICENSE.txt", :as => "LICENSE.txt" if license

  # TODO: bundle gem creates README.md regardless of using_readme setting.
  copy_file "README.rdoc", :binding => binding if using_readme

  copy_file "features/executable.feature", :as => "#{gemname}.feature", :binding => binding
  copy_file "features/step_definitions/executable_steps.rb", :as => "#{gemname}_steps.rb"
  copy_file "bin/executable", :as => gemname, :executable => true, :binding => binding, :from => (multi ? :multicommand : :full)

  gemspec = "#{gemname}.gemspec"
  gem_variable = File.open(gemspec) { |x| x.read }.match(/(\w+)\.executables/)[1]
  add_to_file gemspec, [
    "  #{gem_variable}.add_development_dependency('rdoc')",
    "  #{gem_variable}.add_development_dependency('aruba')",
    "  #{gem_variable}.add_development_dependency('rake', '~> 0.9.2')",
    "  #{gem_variable}.add_dependency('methadone', '~> #{Methadone::VERSION}')",
  ], :before => /^end\s*$/

  if rspec
    add_to_file gemspec, [
    "  #{gem_variable}.add_development_dependency('rspec')",
    ], :before => /^end\s*$/
  end
end

options[:readme] = true

description "Kick the bash habit by bootstrapping your Ruby command-line apps"

on("--force","Overwrite files if they exist")
on("--[no-]readme","[Do not ]produce a README file")
on("--rspec", "Generate RSpec unit tests instead of Test::Unit")
on("--add-lib", "Add lib to the load path") do
  options[:add_lib] = true
end
on "-c cmd1,cmd2,cmdN", "--commands", Array, "Generate framework for a cli app that provides the following commands" do |commands|
  options[:commands] = commands
  unless options[:commands].grep(/^-/).empty?
    puts "Cannot have commands that begin with a '-'"
    exit 65 # Data format error
  end
end

licenses = %w(mit apache custom NONE)
on("-l LICENSE","--license",licenses,"Specify the license for your project",'(' + licenses.join('|') + ')')

use_log_level_option

leak_exceptions true

arg :app_name, :required, "Name of your app, which is used for the gem name and executable name"

version Methadone::VERSION, :compact => true

go!

